using System;
using System.Runtime.InteropServices;
using T3DSharpFramework.Engine;
using T3DSharpFramework.Generated.Structs.Math;
using T3DSharpFramework.Interop;

namespace T3DSharpFramework.Generated.Structs.{{Scope}} {
{% for struct in Structs %}
    public class {{struct.Name}} : IEngineStruct {
        [StructLayout(LayoutKind.Explicit)]
        public struct InternalStruct {
{% for field in struct.Fields -%}
            [FieldOffset({{field.Offset}})] public {{field.Type.NativeReturnType}} {% sanitizeName field.Name %};
{% endfor -%}
        }
        
        public InternalStruct internalStruct;
        
        public IntPtr internalStructPtr;
        
{% for field in struct.Fields -%}
        public {{field.Type.ManagedType}} {% sanitizeName field.Name CamelCase:true %} { get; set; }
{% endfor -%}
        
        public {{struct.Name}}() { }
        
        public {{struct.Name}}(InternalStruct data) { 
            internalStruct = data;
			Free();
        }
        
        public {{struct.Name}}(string s) {
            string[] strings = s.Split(' ');
{% for field in struct.Fields -%}
            {% sanitizeName field.Name CamelCase:true %} = GenericMarshal.StringTo<{{field.Type.ManagedType}}>(strings[{{forloop.index0}}]);            
{% endfor %}
        }
        
        public void Alloc() {
{% for field in struct.Fields -%}
            {% structFieldAlloc field %}
{% endfor -%}
            internalStructPtr = StructMarshal.StructToIntPtr(internalStruct);
        }
        
        public void Free() {
{% for field in struct.Fields -%}
            {% structFieldFree field %}
{% endfor -%}
            if (internalStructPtr != IntPtr.Zero) {
                StructMarshal.FreeStructPtr<InternalStruct>(internalStructPtr);
            }
            internalStructPtr = IntPtr.Zero;
        }
        
        public override string ToString() {
            string s = "";
{% for field in struct.Fields -%}
            s += " " + GenericMarshal.ToString({% sanitizeName field.Name CamelCase:true %});            
{% endfor %}
            return s.Substring(1);
        }
    }
{% endfor %}
}