        public {{class.name}}(bool pRegister = false)
            : base(pRegister) {
           {{~ if class.is_sim_object ~}}
           // Always set the Class Namespace to the C# class name
           ClassName = ((object)this).GetType().Name;
           {{~ end ~}}
        }

        public {{class.name}}(string pName, bool pRegister)
            : base(false) {
            Name = pName;
            {{~ if class.is_sim_object ~}}
            // Handle the case where the class name refers to the name of
            // the object, and thus only meant to be used for that specific object,
            // not encompassing an actual type
            var managedClassName = ((object)this).GetType().Name;
            if (managedClassName != Name) {
               ClassName = managedClassName;
            }
            {{~ end ~}}
            if (pRegister) {
                RegisterObject();
            }
        }

        public {{class.name}}(string pName)
            : this(pName, false) {
        }

        public {{class.name}}(string pName, string pParent, bool pRegister = false)
            : this(pName, pRegister) {
            CopyFrom(Engine.Sim.FindObject<SimObject>(pParent));
        }

        public {{class.name}}(string pName, SimObject pParent, bool pRegister = false)
            : this(pName, pRegister) {
            CopyFrom(pParent);
        }

        public {{class.name}}(SimObject pObj)
            : base(pObj) {
        }

        public {{class.name}}(IntPtr pObj)
            : base(pObj) {
        }

		protected override void CreateObjectPtr()
		{
			ObjectPtr = InternalUnsafeMethods.Create()(new InternalUnsafeMethods.Create__Args());
		}
